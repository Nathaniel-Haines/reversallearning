fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
numSubjs
maxTrials
Tsubj
subjGroupList
N_cues - 1
choice
outcome
cue
useTrials
i
dim(choice)
for (i in 1:numSubjs) {
curSubj      <- subjList[i]
useTrials    <- Tsubj[i]
tmp          <- subset(rawdata, rawdata$subjID == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
cue[i, 1:useTrials]     <- as.numeric(as.factor(tmp$cue))
}
dim(choice)
useTrials
numSubjs
i<-numSubjs
useTrials    <- Tsubj[i]
useTrials
tmp          <- subset(rawdata, rawdata$subjID == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
useTrials
dim(outcome)
for (i in 1:numSubjs) {
#i<-numSubjs
curSubj      <- subjList[i]
useTrials    <- Tsubj[i]
tmp          <- subset(rawdata, rawdata$subid == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
cue[i, 1:useTrials]     <- as.numeric(as.factor(tmp$cue))
}
subjList
numSubjs
choice  <- array(0, c(numSubjs, maxTrials) )
outcome <- array(0, c(numSubjs, maxTrials) )
cue     <- array(0, c(numSubjs, maxTrials) )
choice
dim(choice)
dim(outcome)
dim(cue)
for (i in 1:numSubjs) {
#i<-numSubjs
curSubj      <- subjList[i]
useTrials    <- Tsubj[i]
tmp          <- subset(rawdata, rawdata$subid == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
cue[i, 1:useTrials]     <- as.numeric(as.factor(tmp$cue))
}
dataList <- list(
N        = numSubjs,
T        = maxTrials,
Tsubj    = Tsubj,
subjGr  = subjGroupList,
N_cues   = N_cues - 1,
choice   = choice,
outcome  = outcome,
cue      = cue,
numPars  = 2
)
subjGroupList
N_cues
choice
dim(choice)
dim(outcome)
dim(cue)
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
rawdata.rewardonly <- subset(rawdata, subid<355 & choice != 0 & cue != 0 & RiskCat==3)
rawdata.rewardonly <- subset(rawdata, subid<355 & choice != 0 & cue != 0 & RiskCat==3)
length(unique(rawdata.rewardonly$subjID))
rawdata.rewardonly <- subset(rawdata, subid<355 & choice != 0 & cue != 0 & RiskCat==3)
length(unique(rawdata.rewardonly$subjID))
rawdata.rewardonly <- subset(rawdata, subid<355 & choice != 0 & cue != 0)
length(unique(rawdata.rewardonly$subjID))
rawdata.rewardonly <- subset(rawdata, subid<355 & choice != 0 & cue != 0 & RiskCat==3)
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly <- subset(rawdata, & choice != 0 & cue != 0 & RiskCat==3)
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly <- subset(rawdata, choice != 0 & cue != 0 & RiskCat %in% c(2,3))
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly <- subset(rawdata, choice != 0 & cue != 0 & RiskCat %in% c(2,3))
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-rawdata[rawdata$Condition=="reward"]
subidgroup<-unique(rawdata.rewardonly[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
subidgroup<-unique(rawdata.rewardonly[,c("subid","RiskCat")])
rawdata.rewardonly<-rawdata[rawdata$Condition=="reward",]
subidgroup<-unique(rawdata.rewardonly[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
subjGroupList<-subidgroup$RiskCat #list of subject group
numSubjs <- length(subjList)  # number of subjects
Gr_N <- length(unique(subjGroupList))#number of groups
Tsubj    <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
N_cues   <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj   <- subjList[ i ]
Tsubj[i]  <- sum( rawdata$subid == curSubj )  # Tsubj[N]
N_cues[i] <- length(unique(rawdata$cue))
}
maxTrials <- max(Tsubj)
choice  <- array(0, c(numSubjs, maxTrials) )
outcome <- array(0, c(numSubjs, maxTrials) )
numSubjs
maxTrials
subjList
subidgroup$subid
subidgroup<-unique(rawdata.rewardonly[,c("subid","RiskCat")])
subidgroup
rawdata.rewardonly
rawdata$Condition
rawdata.rewardonly<-rawdata[rawdata$Condition==1,]
subidgroup<-unique(rawdata.rewardonly[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
subjGroupList<-subidgroup$RiskCat #list of subject group
rawdata$
rawdata.rewardonly<-rawdata[rawdata$Motivation=="reward",]
rawdata.rewardonly<-rawdata[rawdata$Motivation=="reward",]
subidgroup<-unique(rawdata.rewardonly[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
subjGroupList<-subidgroup$RiskCat #list of subject group
numSubjs <- length(subjList)  # number of subjects
Gr_N <- length(unique(subjGroupList))#number of groups
Tsubj    <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
N_cues   <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj   <- subjList[ i ]
Tsubj[i]  <- sum( rawdata$subid == curSubj )  # Tsubj[N]
N_cues[i] <- length(unique(rawdata$cue))
}
maxTrials <- max(Tsubj)
choice  <- array(0, c(numSubjs, maxTrials) )
outcome <- array(0, c(numSubjs, maxTrials) )
cue     <- array(0, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
#i<-numSubjs
curSubj      <- subjList[i]
useTrials    <- Tsubj[i]
tmp          <- subset(rawdata, rawdata$subid == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
cue[i, 1:useTrials]     <- as.numeric(as.factor(tmp$cue))
}
dataList <- list(
N        = numSubjs,
T        = maxTrials,
Tsubj    = Tsubj,
subjGr  = subjGroupList,
N_cues   = N_cues - 1,
choice   = choice,
outcome  = outcome,
cue      = cue,
numPars  = 2
)
base.model<- stan_model("stan/prl_ben_v3.stan")
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
subidgroup<-unique(data.to.use[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
subjGroupList<-subidgroup$RiskCat #list of subject group
numSubjs <- length(subjList)  # number of subjects
Gr_N <- length(unique(subjGroupList))#number of groups
Tsubj    <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
N_cues   <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj   <- subjList[ i ]
Tsubj[i]  <- sum( data.to.use$subid == curSubj )  # Tsubj[N]
N_cues[i] <- length(unique(data.to.use$cue))
}
# Setting maxTrials
maxTrials <- max(Tsubj)
choice  <- array(0, c(numSubjs, maxTrials) )
outcome <- array(0, c(numSubjs, maxTrials) )
cue     <- array(0, c(numSubjs, maxTrials) )
#cue     <- array(0, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
#i<-numSubjs
curSubj      <- subjList[i]
useTrials    <- Tsubj[i]
tmp          <- subset(data.to.use, data.to.use$subid == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
cue[i, 1:useTrials]     <- as.numeric(as.factor(tmp$cue))
}
dataList <- list(
N        = numSubjs,
T        = maxTrials,
Tsubj    = Tsubj,
subjGr  = subjGroupList,
N_cues   = N_cues - 1,
choice   = choice,
outcome  = outcome,
cue      = cue,
numPars  = 2
)
data.to.use<-rawdata.rewardonly
subidgroup<-unique(data.to.use[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
subjGroupList<-subidgroup$RiskCat #list of subject group
numSubjs <- length(subjList)  # number of subjects
Gr_N <- length(unique(subjGroupList))#number of groups
Tsubj    <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
N_cues   <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj   <- subjList[ i ]
Tsubj[i]  <- sum( data.to.use$subid == curSubj )  # Tsubj[N]
N_cues[i] <- length(unique(data.to.use$cue))
}
maxTrials <- max(Tsubj)
choice  <- array(0, c(numSubjs, maxTrials) )
outcome <- array(0, c(numSubjs, maxTrials) )
cue     <- array(0, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
#i<-numSubjs
curSubj      <- subjList[i]
useTrials    <- Tsubj[i]
tmp          <- subset(data.to.use, data.to.use$subid == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
cue[i, 1:useTrials]     <- as.numeric(as.factor(tmp$cue))
}
dataList <- list(
N        = numSubjs,
T        = maxTrials,
Tsubj    = Tsubj,
subjGr  = subjGroupList,
N_cues   = N_cues - 1,
choice   = choice,
outcome  = outcome,
cue      = cue,
numPars  = 2
)
base.model<- stan_model("stan/prl_ben_v3.stan")
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
dataList
numSubjs
data.to.use<-rawdata.rewardonly
subidgroup<-unique(data.to.use[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
rawdata<-rbind(rawdata.group2,rawdata.group4)
rawdata.rewardonly<-rawdata[rawdata$Motivation=="reward",]
length(unique(rawdata.rewardonly$subid))
length(unique(rawdata$subid))
length(unique(rawdata.group4$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<315 & choice != 0 & cue != 0 & RiskCat==3 & Motivation=="reward")
rawdata.all <- read.table("../data/all_subjs_datacomplete_all.txt", header = T)
rawdata.group2 <- subset(rawdata.all, subid<155 & choice != 0 & cue != 0 & RiskCat==2)
length(unique(rawdata.group2$subid))
rawdata.group4 <- subset(rawdata.all, subid<315 & choice != 0 & cue != 0 & RiskCat==3)
length(unique(rawdata.group4$subid))
rawdata<-rbind(rawdata.group2,rawdata.group4)
rawdata.rewardonly<-subset(rawdata.all, subid<315 & choice != 0 & cue != 0 & RiskCat==3 & Motivation=="reward")
rawdata.rewardonly
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<315 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<255 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<155 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<185 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<205 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<215 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<210 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<212 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
rawdata.rewardonly<-subset(rawdata.all, subid<211 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
data.to.use<-rawdata.rewardonly
subidgroup<-unique(data.to.use[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
subjGroupList<-subidgroup$RiskCat #list of subject group
numSubjs <- length(subjList)  # number of subjects
Gr_N <- length(unique(subjGroupList))#number of groups
Tsubj    <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
N_cues   <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj   <- subjList[ i ]
Tsubj[i]  <- sum( data.to.use$subid == curSubj )  # Tsubj[N]
N_cues[i] <- length(unique(data.to.use$cue))
}
maxTrials <- max(Tsubj)
choice  <- array(0, c(numSubjs, maxTrials) )
outcome <- array(0, c(numSubjs, maxTrials) )
cue     <- array(0, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
#i<-numSubjs
curSubj      <- subjList[i]
useTrials    <- Tsubj[i]
tmp          <- subset(data.to.use, data.to.use$subid == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
cue[i, 1:useTrials]     <- as.numeric(as.factor(tmp$cue))
}
dataList <- list(
N        = numSubjs,
T        = maxTrials,
Tsubj    = Tsubj,
subjGr  = subjGroupList,
N_cues   = N_cues - 1,
choice   = choice,
outcome  = outcome,
cue      = cue,
numPars  = 2
)
base.model<- stan_model("stan/prl_ben_v3.stan")
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
dataList
dataList <- list(
N        = numSubjs,
T        = maxTrials,
Tsubj    = Tsubj,
subjGr  = subjGroupList,
N_cues   = N_cues - 1,
choice   = choice,
outcome  = outcome,
cue      = cue,
numPars  = 2
)
dataList
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
View(rawdata.rewardonly)
View(choice)
base.model<- stan_model("stan/prl_ben_v3_orig.stan")
rstan:::rstudio_stanc("stan/prl_ben_v3_orig.stan")
base.model<- stan_model("stan/prl_ben_v3_orig.stan")
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
group.rp.model<- stan_model("stan/prl_ben_v3_group_rp.stan")
group.model<- stan_model("stan/prl_ben_v3_group.stan")
View(completelist)
library(data.table)
complete.dt<-data.table(completelist)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
complete.dt<-data.table(completelist)
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)])
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)][,TrialNumMean:=mean(N),.(runid,Motivation)])
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)][,TrialNumMean:=mean(N),.(runid)])
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)])
completelist.dilemma.run1<-completelist.dilemma[runid==1]
completelist.dilemma.reward<-completelist.dilemma.run1[Motivation=="reward"]
completelist.dilemma.punishment<-completelist.dilemma.run1[Motivation=="punishment"]
library(parallel)
filename<-"../data/all_subjs_datacomplete_reward.txt"
write.table(completelist.dilemma.reward,filename,row.names = FALSE)
filename<-"../data/all_subjs_datacomplete_punishment.txt"
write.table(completelist.dilemma.punishment,filename,row.names = FALSE)
filename<-"../data/all_subjs_datacomplete_all.txt"
write.table(completelist.dilemma,filename,row.names = FALSE)
filename<-"../data/all_subjs_datacomplete_all.txt"
write.table(completelist.dilemma.run1,filename,row.names = FALSE)
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)][,.(.N,TrialsPerSubject=mean(N)),.(runid,Motivation)])
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(runid,Motivation)])
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(runid,Motivation)])
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)])
knitr::kable(complete.dt[,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)])
dilemma.trials.record<-complete.dt[Condition==1,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
knitr::kable(merge(all.trials.record,dilemma.trials.record))
all.trials.record<-complete.dt[,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
dilemma.trials.record<-complete.dt[Condition==1,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
knitr::kable(merge(all.trials.record,dilemma.trials.record))
all.trials.record<-complete.dt[,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
dilemma.trials.record<-complete.dt[Condition==1,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
knitr::kable(merge(all.trials.record,dilemma.trials.record,by.x=c("Motivation","runid"),by.y=c("Motivation","runid")))
all.trials.record<-complete.dt[,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
dilemma.trials.record<-complete.dt[Condition==1,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
knitr::kable(merge(all.trials.record,dilemma.trials.record,by.x=c("Motivation","runid"),by.y=c("Motivation","runid","Subjects"),
suffixes = c(" All Trials", " Dilemma Trials")))
all.trials.record<-complete.dt[,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
dilemma.trials.record<-complete.dt[Condition==1,.N,.(subid,runid,Motivation)][,.(Subjects=.N,TrialsPerSubject=mean(N)),.(Motivation,runid)]
knitr::kable(merge(all.trials.record,dilemma.trials.record,by.x=c("Motivation","runid","Subjects"),by.y=c("Motivation","runid","Subjects"),
suffixes = c(" All Trials", " Dilemma Trials")))
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
rm(list = ls())
library(rstan)
library(loo)
# Read in raw data
rawdata.all <- read.table("../data/all_subjs_datacomplete_all.txt", header = T)
rawdata.group2 <- subset(rawdata.all, subid<155 & choice != 0 & cue != 0 & RiskCat==2)
length(unique(rawdata.group2$subid))
rawdata.group4 <- subset(rawdata.all, subid<315 & choice != 0 & cue != 0 & RiskCat==3)
length(unique(rawdata.group4$subid))
rawdata<-rbind(rawdata.group2,rawdata.group4)
rawdata.rewardonly<-subset(rawdata.all, subid<211 & choice != 0 & cue != 0 & RiskCat %in% c(2,3) & Motivation=="reward")
length(unique(rawdata.rewardonly$subid))
data.to.use<-rawdata.rewardonly
subidgroup<-unique(data.to.use[,c("subid","RiskCat")])
subjList <- subidgroup$subid  # list of subjects x blocks
subjGroupList<-subidgroup$RiskCat #list of subject group
numSubjs <- length(subjList)  # number of subjects
Gr_N <- length(unique(subjGroupList))#number of groups
Tsubj    <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
N_cues   <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj   <- subjList[ i ]
Tsubj[i]  <- sum( data.to.use$subid == curSubj )  # Tsubj[N]
N_cues[i] <- length(unique(data.to.use$cue))
}
maxTrials <- max(Tsubj)
choice  <- array(0, c(numSubjs, maxTrials) )
outcome <- array(0, c(numSubjs, maxTrials) )
cue     <- array(0, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
#i<-numSubjs
curSubj      <- subjList[i]
useTrials    <- Tsubj[i]
tmp          <- subset(data.to.use, data.to.use$subid == curSubj)
choice[i, 1:useTrials]  <- tmp$choice
outcome[i, 1:useTrials] <- tmp$outcome
cue[i, 1:useTrials]     <- as.numeric(as.factor(tmp$cue))
}
dataList <- list(
N        = numSubjs,
T        = maxTrials,
Tsubj    = Tsubj,
subjGr  = subjGroupList,
N_cues   = N_cues - 1,
choice   = choice,
outcome  = outcome,
cue      = cue,
numPars  = 2
)
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
base.model<- stan_model("stan/prl_ben_v3_orig.stan")
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
traceplot(fit4)
stan_plot(fit4, "alpha", show_density = T)
loo(extract(fit4)$log_lik)
parVals <- extract(fit4)
pred <- reshape2::melt(apply(parVals$y_hat, c(2,3), mean))
names(pred) <- c("subjID", "trial", "pred")
new_pred <- pred[pred$pred!=0,]
all_data <- cbind(rawdata, new_pred)
base.model<- stan_model("stan/prl_ben_v3_orig.stan")
fit4 <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
source("util/get_cue_index_from_cum_freq.R")
data
ds
traceplot(fit)
fit <- vb(base.model, data = dataList,
pars = c("mu_alpha", "mu_beta",
"sigma",
"alpha", "beta",
"log_lik", "y_hat"),
adapt_engaged = F, eta = 1)
traceplot(fit)
